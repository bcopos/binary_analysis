\begin{thebibliography}{10}

\bibitem{zzuf}
{zzuf}: Multi-purpose fuzzer.
\newblock \url{http://caca.zoy.org/wiki/zzuf}.

\bibitem{polyglot}
J.~Caballero, H.~Yin, Z.~Liang, and D.~Song.
\newblock Polyglot: Automatic extraction of protocol message format using
  dynamic binary analysis.
\newblock In {\em Proceedings of the 14th ACM conference on Computer and
  communications security}, pages 317--329. ACM, 2007.

\bibitem{exesymex}
C.~Cadar, V.~Ganesh, P.~M. Pawlowski, D.~L. Dill, and D.~R. Engler.
\newblock Exe: Automatically generating inputs of death.
\newblock In {\em Proceedings of the 13th ACM Conference on Computer and
  Communications Security}, CCS '06, pages 322--335, New York, NY, USA, 2006.
  ACM.

\bibitem{prospex}
P.~Comparetti, G.~Wondracek, C.~Kruegel, and E.~Kirda.
\newblock Prospex: Protocol specification extraction.
\newblock In {\em Security and Privacy, 2009 30th IEEE Symposium on}, pages
  110--125, May 2009.

\bibitem{darpacgc}
DARPA.
\newblock Cyber grand challenge binaries.
\newblock \url{https://github.com/CyberGrandChallenge/samples}, 2014--2015.

\bibitem{interviewbinary}
erenyagdiran.
\newblock I was just asked to crack a program in a job interview !
\newblock 2014.

\bibitem{godefroid2008automated}
P.~Godefroid, M.~Y. Levin, D.~A. Molnar, et~al.
\newblock Automated whitebox fuzz testing.
\newblock In {\em NDSS}, volume~8, pages 151--166, 2008.

\bibitem{symbolicexecution}
J.~C. King.
\newblock Symbolic execution and program testing.
\newblock {\em Commun. ACM}, 19(7):385--394, July 1976.

\bibitem{smartfuzzer}
A.~Lanzi, L.~Martignoni, M.~Monga, and R.~Paleari.
\newblock A smart fuzzer for x86 executables.
\newblock In {\em Software Engineering for Secure Systems, 2007. SESS '07: ICSE
  Workshops 2007. Third International Workshop on}, pages 7--7, May 2007.

\bibitem{pintool}
C.-K. Luk, R.~Cohn, R.~Muth, H.~Patil, A.~Klauser, G.~Lowney, S.~Wallace, V.~J.
  Reddi, and K.~Hazelwood.
\newblock Pin: Building customized program analysis tools with dynamic
  instrumentation.
\newblock {\em SIGPLAN Not.}, 40(6):190--200, June 2005.

\bibitem{fuzzball}
S.~McCamant et~al.
\newblock {FuzzBALL} vine-based binary symbolic execution.
\newblock \url{http://bitblaze.cs.berkeley.edu/fuzzball.html}, 2014--2015.

\bibitem{millerfuzz}
B.~P. Miller, L.~Fredriksen, and B.~So.
\newblock An empirical study of the reliability of unix utilities.
\newblock {\em Commun. ACM}, 33(12):32--44, Dec. 1990.

\bibitem{millerfuzzrevisited}
B.~P. Miller, D.~Koski, C.~Pheow, L.~V. Maganty, R.~Murthy, A.~Natarajan, and
  J.~Steidl.
\newblock Fuzz revisited: A re-examination of the reliability of unix utilities
  and services.
\newblock 1995.

\bibitem{molnar2009dynamic}
D.~Molnar, X.~C. Li, and D.~Wagner.
\newblock Dynamic test generation to find integer bugs in x86 binary linux
  programs.
\newblock In {\em USENIX Security Symposium}, pages 67--82, 2009.

\bibitem{bitblaze}
D.~Song, D.~Brumley, et~al.
\newblock {BitBlaze}: A new approach to computer security via binary analysis.
\newblock In {\em Proceedings of the 4th International Conference on
  Information Systems Security. Keynote invited paper.}, Hyderabad, India.
\newblock \url{http://bitblaze.cs.berkeley.edu/}.

\bibitem{weaver2008can}
V.~M. Weaver and S.~A. McKee.
\newblock Can hardware performance counters be trusted?
\newblock In {\em Workload Characterization, 2008. IISWC 2008. IEEE
  International Symposium on}, pages 141--150. IEEE, 2008.

\end{thebibliography}
